---
title: "Module 5: Ring-width only model (RW-only)"
author: "Andria Dawson and Kelly Heilman"
format:
  html:
    code-fold: true
---

# Ring-width only

This module introduces the workflow for the case where the only data informing the model is the ring-width dataset. This dataset includes diameter at time of coring, and one or more ring-width time series for each sampled tree.

This workflow involves: 1. Inferring tree growth using the state-space model; 2. Using inferred growth to determine biomass; and 3. Calculating biomass increment from biomass.

## 1. Inferring Growth

We estimate the parameters of this state-space model in a program called `stan` which interfaces to `R` via a package called `rstan` (`cmdstan` is another package that is used.)

```{R}
library(rstan)
library(dplyr)
library(reshape2)
library(ggplot2)
library(tidyr)
```

# load the model data

```{r}
# load built dataset 
dat = readRDS('data/tree_data_HARVARD.RDS')

# dat$sig_d_obs = sig_d_obs
sig_d_obs = readRDS('data/sig_d_obs_RWC.RDS')
dat$sig_d_obs = sig_d_obs
```

# Stan Model

```{r}
# add R stan code here
```

# add the math notation of the model here:

## Running the model: Example for a short run

```{r, echo=FALSE}

# load built dataset
dat = readRDS('data/tree_data_HARVARD.RDS')

taxa = dat$taxa
years = dat$years


# # load built data for site
# dat = readRDS(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'input',paste0('tree_data_', site ,'_STAN_',mvers,'_', dvers, '.RDS')))
N_years = dat$N_years
N_Tr = dat$N_Tr
N_taxa = dat$N_taxa
X2Tr = dat$X2Tr
X2year = dat$X2year
Tr = dat$Tr %>% arrange(stat_id)
taxon = Tr$taxon
plot = Tr$plot
years = dat$years
year_lo = min(years)
year_hi = max(years)
# sig_d_obs = dat$sig_d_obs
pdbh = exp(dat$logTr)
#
list2env(dat, envir = globalenv())

N_C = dat$N_C
X2C = dat$X2C
X2year_C = dat$X2year_C

allTrees = dat$allTrees %>% arrange(stat_id)
taxon_C = allTrees$taxon
plot_C = allTrees$plot
distance = allTrees$distance


fit_RW = readRDS('output/model_fit_RW_HARVARD.RDS')

post_RW = readRDS('output/model_post_RW_HARVARD.RDS')

```

```{r}
#| eval: FALSE

# run a version with a small # of iterations here to show the output

# settings

#
compiled_RW = stan_model(file = paste0('models/growth_model_RW.stan'))

# fit and extract values
fit_RW = sampling(compiled_RW, 
                  data = dat, 
                  iter = iter, 
                  chains = nchains,
                  verbose=TRUE)
```

## The model outputs

## show summary table of model fit

```{r}
#| eval: TRUE

fit_RW

post_RW

class(post_RW)
dim(post_RW)

```

## histograms of data and process uncertainty

```{r}
variables = names(post_RW[1,1,])
allSX = grep('sig_x\\[',variables)
allSXOBS = grep('sig_x_obs',variables)

post_sx = post_RW[,,allSX]
post_sxobs = post_RW[,,allSXOBS]

head(post_sx)
dim(post_sx)

colnames(post_sx) = taxa
post_sx_melt = melt(post_sx)
colnames(post_sx_melt) = c('iteration', 'species_code', 'sigma_x')
post_sx_melt$model = 'RW'

p = ggplot(data=post_sx_melt) +
  geom_histogram(aes(x=sigma_x, y=after_stat(density), colour=model, fill=model)) +
  facet_wrap(~species_code) + 
  theme_bw(12)
print(p)

ggplot(data=post_sx_melt) +
  geom_density(aes(x=sigma_x, colour=model, fill=model)) +
  facet_wrap(~species_code, scales = 'free_y') + 
  theme_bw(12)

sig_x_mean = post_sx_melt %>% 
  group_by(species_code) %>%
  dplyr::summarize(sig_x_mean = mean(sigma_x))
sig_x_mean = sig_x_mean[order(sig_x_mean$sig_x_mean),]

post_sx_melt$species_code = factor(post_sx_melt$species_code, levels=sig_x_mean$species_code)

p = ggplot(data=post_sx_melt) +
  # geom_boxplot(aes(x=species_code, y=sigma_x, colour=model, fill=model), alpha=0.5) +
  geom_violin(aes(x=species_code, y=sigma_x, colour=model, fill=model), alpha=0.5) +
  theme_bw(14) +
  xlab('Species') +
  ylab('sigma_x')
print(p)


```

```{r}
variables = names(post_RW[1,1,])
allSXOBS = grep('sig_x_obs',variables)

post_sxobs = post_RW[,,allSXOBS]

head(post_sx)
dim(post_sx)

N_iter = 250

post_sxobs = data.frame(post_sxobs)
post_sxobs$iteration = seq(1, N_iter)
colnames(post_sxobs) = c('sigma_x_obs', 'iteration')
post_sxobs$model = 'RW'

ggplot(data=post_sxobs) +
  geom_histogram(aes(x=sigma_x_obs, y=after_stat(density), colour=model, fill=model)) 

ggplot(data=post_sxobs) +
  geom_boxplot(aes(x=model, y=sigma_x_obs)) +
  theme_bw(14) +
  xlab('Model') +
  ylab('sigma_x_obs')

```

## year-species effect

```{r}

allBTs = grep('beta_t\\[',variables)
post_bt = post_RW[,,allBTs]

post_bt_melt = melt(post_bt)
post_bt_melt$model = 'RW'

bt_pars_split = strsplit(as.vector(post_bt_melt$parameters), '\\[|\\,|\\]')

post_bt_melt$species_code = taxa[sapply(bt_pars_split, function(x) as.numeric(x[[3]]))]
post_bt_melt$year = years[sapply(bt_pars_split, function(x) as.numeric(x[[2]]))]
colnames(post_bt_melt) = c('iteration', 'parameter', 'beta_t', 'model', 'species_code', 'year')

beta_t_quant = post_bt_melt %>% 
  group_by(model, species_code, year) %>%
  dplyr::summarize(beta_t_lo = quantile(beta_t, 0.025),
                   beta_t_mid = quantile(beta_t, 0.5),
                   beta_t_hi = quantile(beta_t, 0.975),
                   beta_t_mean = mean(beta_t), 
                   .groups = 'keep')

p = ggplot(data=beta_t_quant) +
  geom_ribbon(aes(x=year, ymin=beta_t_lo, ymax=beta_t_hi, colour=model, fill=model), alpha=0.5) +
  # geom_linerange(aes(x=year, ymin=beta_t_lo, ymax=beta_t_hi)) +
  geom_line(aes(x=year, y=beta_t_mid, colour=model), lty=2, lwd=1.2, alpha=0.5) +
  geom_point(aes(x=year, y=beta_t_mid, colour=model), alpha=0.5) + 
  xlab('year') +
  ylab('beta_t') +
  # xlim(c(year_lo, year_hi)) +
  theme_bw(16) +
  facet_grid(species_code~.)
print(p)

p = ggplot(data=beta_t_quant) +
  geom_hline(aes(yintercept=0), lty=2, lwd=1.2) +
  geom_point(aes(x=year, y=beta_t_mid)) +
  geom_linerange(aes(x=year, ymin=beta_t_lo, ymax=beta_t_hi)) +
  xlab('year') +
  ylab('beta_t') +
  # xlim(c(year_lo, year_hi)) +
  theme_bw(16) +
  facet_grid(model~species_code)
print(p)

beta_t_mid = pivot_wider(beta_t_quant[,c('model', 
                                         'species_code', 
                                         'year', 
                                         'beta_t_mid')], 
                         names_from=model, 
                         values_from=beta_t_mid)
colnames(beta_t_mid) = c('species_code', 'year', 'bt_mid_C', 'bt_mid_RW', 'bt_mid_RWC')

beta_t_lo = pivot_wider(beta_t_quant[,c('model', 
                                        'species_code', 
                                        'year', 
                                        'beta_t_lo')], 
                        names_from=model, 
                        values_from=beta_t_lo)
colnames(beta_t_lo) = c('species_code', 'year', 'bt_lo_C', 'bt_lo_RW', 'bt_lo_RWC')

beta_t_hi = pivot_wider(beta_t_quant[,c('model', 
                                        'species_code', 
                                        'year', 
                                        'beta_t_hi')], 
                        names_from=model, 
                        values_from=beta_t_hi)
colnames(beta_t_hi) = c('species_code', 'year', 'bt_hi_C', 'bt_hi_RW', 'bt_hi_RWC')


beta_t_quant_wide = merge(beta_t_mid, beta_t_hi)
beta_t_quant_wide = merge(beta_t_quant_wide, beta_t_lo)

p = ggplot(data=beta_t_quant_wide) +
  # geom_hline(aes(yintercept=0), lty=2, lwd=1.2) +
  geom_point(aes(x=bt_mid_RWC, y=bt_mid_C), colour='dodgerblue', alpha=0.5) +
  geom_point(aes(x=bt_mid_RWC, y=bt_mid_RW), colour='#F8766D', alpha=0.5) +
  # geom_linerange(aes(x=year, ymin=beta_t_lo, ymax=beta_t_hi)) +
  xlab('Chronology value (RW + Census)') +
  ylab('Chronology value (RW or Census)') +
  # xlim(c(year_lo, year_hi)) +
  theme_bw(16) #+
# facet_grid(model~species_code)
print(p)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect.pdf'), width=12, height=6)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect.png'), width=12, height=6)

p = ggplot(data=beta_t_quant_wide) +
  # geom_hline(aes(yintercept=0), lty=2, lwd=1.2) +
  geom_point(aes(x=bt_mid_RWC, y=bt_mid_C), colour='dodgerblue', alpha=0.5) +
  geom_point(aes(x=bt_mid_RWC, y=bt_mid_RW), colour='#F8766D', alpha=0.5) +
  geom_linerange(aes(x=bt_mid_RWC, ymin=bt_lo_C, ymax=bt_hi_C),colour='dodgerblue',  alpha=0.1) +
  geom_linerange(aes(y=bt_mid_C, xmin=bt_lo_RWC, xmax=bt_hi_RWC), colour='dodgerblue', alpha=0.1) +
  geom_linerange(aes(x=bt_mid_RWC, ymin=bt_lo_RW, ymax=bt_hi_RW),colour='#F8766D',  alpha=0.1) +
  geom_linerange(aes(y=bt_mid_RW, xmin=bt_lo_RWC, xmax=bt_hi_RWC), colour='#F8766D', alpha=0.1) +
  xlab('Chronology value (RW + Census)') +
  ylab('Chronology value (RW or Census)') +
  # xlim(c(year_lo, year_hi)) +
  theme_bw(16) #+
# facet_grid(model~species_code)
print(p)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect.pdf'), width=12, height=6)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect.png'), width=12, height=6)


bt_long_RW = beta_t_quant_wide[,c('species_code', 'year', 'bt_lo_RW', 'bt_mid_RW', 'bt_hi_RW',
                                  'bt_lo_RWC', 'bt_mid_RWC', 'bt_hi_RWC')]
colnames(bt_long_RW) = c('species_code', 'year', 'bt_lo_1', 'bt_mid_1', 'bt_hi_1',
                         'bt_lo_2', 'bt_mid_2', 'bt_hi_2')
bt_long_RW$type = 'RW'

bt_long_C = beta_t_quant_wide[,c('species_code', 'year', 'bt_lo_C', 'bt_mid_C', 
                                 'bt_hi_C',
                                 'bt_lo_RWC', 'bt_mid_RWC', 'bt_hi_RWC')]
colnames(bt_long_C) = c('species_code', 'year', 'bt_lo_1', 'bt_mid_1', 'bt_hi_1',
                        'bt_lo_2', 'bt_mid_2', 'bt_hi_2')
bt_long_C$type = 'Census'

bt_long_pairs = rbind(bt_long_RW, bt_long_C)

p = ggplot(data=bt_long_pairs) +
  # geom_hline(aes(yintercept=0), lty=2, lwd=1.2) +
  geom_point(aes(x=bt_mid_2, y=bt_mid_1), alpha=0.5) +
  geom_linerange(aes(x=bt_mid_2, ymin=bt_lo_1, ymax=bt_hi_1), alpha=0.1) +
  geom_linerange(aes(y=bt_mid_1, xmin=bt_lo_2, xmax=bt_hi_2), alpha=0.1) +
  geom_abline(intercept=0, slope=1, colour='dodgerblue', linetype=2) + 
  # geom_linerange(aes(x=bt_mid_RWC, ymin=bt_lo_RW, ymax=bt_hi_RW),colour='#F8766D',  alpha=0.1) +
  # geom_linerange(aes(y=bt_mid_RW, xmin=bt_lo_RWC, xmax=bt_hi_RWC), colour='#F8766D', alpha=0.1) +
  xlab('Chronology value (RW + Census)') +
  ylab('Chronology value (RW or Census)') +
  # xlim(c(year_lo, year_hi)) +
  theme_bw(16) +
  facet_grid(type~species_code) +
  coord_fixed(xlim=c(-1, 1.5), ylim=c(-1, 1.5))
print(p)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect_scatter_type_species.pdf'), width=12, height=6)
ggsave(file.path(site_dir,'runs',paste0(mvers,'_',dvers),'figures','time_species_effect_scatter_type_species.png'), width=12, height=6)

beta_t_quant_wide$bt_sig_RW = ifelse(sign(beta_t_quant_wide$bt_lo_RW * beta_t_quant_wide$bt_hi_RW)>0, T, F)
beta_t_quant_wide$bt_sig_C =  ifelse(sign(beta_t_quant_wide$bt_lo_C * beta_t_quant_wide$bt_hi_C)>0, T, F)
beta_t_quant_wide$bt_sig_RWC =  ifelse(sign(beta_t_quant_wide$bt_lo_RWC * beta_t_quant_wide$bt_hi_RWC)>0, T, F)
```

## Growth plots for some trees

```{R}

allDs = grep('D\\[',variables)
post_d = post_RW[,,allDs]

allRWs = grep('X\\[',variables)
post_rw = post_RW[,,allRWs]


tree=1
print(tree)
in.RW = tree %in% X2Tr

if (in.RW){
  inds = which(X2Tr == tree)
  yrinds = X2year[inds]
  
  dbh_iter = t(post_d[,inds])
  dbh_iter = data.frame(dbh_iter)
  dbh_iter = data.frame(year=years[yrinds], dbh_iter)
  
  dbh_mean = apply(dbh_iter[,2:ncol(dbh_iter)], 1, mean, na.rm=TRUE)
  dbh_quant = t(apply(dbh_iter[,2:ncol(dbh_iter)], 1,
                      function(x) quantile(x, c(0.025, 0.5, 0.975), na.rm=TRUE)))
  
  dbh_tree = data.frame(d_mean = dbh_mean,
                        d_median = dbh_quant[,2],
                        d_lo = dbh_quant[,1],
                        d_hi = dbh_quant[,3],
                        year = years[yrinds],
                        model = 'RW')
  
}

# determine which estimates correspond to this tree
inds_C = which(X2Tr_C == tree)
yrinds_C = X2year_C[inds_C]


idx_d_obs_C = which(Dobs$stat_id == tree)

dbh_obs_C = data.frame(d_obs = Dobs$dbh[idx_d_obs_C],
                       year = years[Dobs$year[idx_d_obs_C]])

stem_id = Dobs$ID[idx_d_obs_C][1]

if (in.RW){
  idx_d_obs = which(Tr$stat_id == tree)
  
  dbh_obs = data.frame(d_obs = Tr$dbh[idx_d_obs],
                       year = years[Tr$year[idx_d_obs]])
  
} else {
  dbh_obs = data.frame(d_obs = numeric(0),
                       year = numeric(0))
}

# Create a text
grob = grobTree(textGrob(paste0('Tree ', tree, '; Stem ID ', stem_id, '; Species ', taxon[tree] ), x=0.05,  y=0.9, hjust=0,
                         gp=gpar(col="black", fontsize=22)))

p1 = ggplot() +
  geom_ribbon(data=dbh_tree, aes(x=year, ymin=d_lo, ymax=d_hi, fill=model), alpha=0.5) +
  geom_line(data=dbh_tree, aes(x=year, y=d_median, colour=model)) +
  geom_point(data=dbh_obs, aes(x=year, y=d_obs), size=2) +
  geom_point(data=dbh_obs_C, aes(x=year, y=d_obs), size=2, shape=1) +
  xlab('year') +
  ylab('dbh (cm)') +
  xlim(c(year_lo, year_hi)) +
  theme_bw(16)  +
  annotation_custom(grob)

print(p1)

if (in.RW){
  inds = which(X2Tr == tree)
  yrinds = X2year[inds]
  
  rw_iter = t(post_rw[[1]][,inds])
  rw_iter = data.frame(rw_iter)
  rw_iter = data.frame(year=years[yrinds], rw_iter)
  
  rw_mean = apply(rw_iter[,2:ncol(rw_iter)], 1, mean, na.rm=TRUE)
  rw_quant = t(apply(rw_iter[,2:ncol(rw_iter)], 1,
                     function(x) quantile(x, c(0.025, 0.5, 0.975), na.rm=TRUE)))
  
  rw_tree = data.frame(x_mean = rw_mean,
                       x_median = rw_quant[,2],
                       x_lo = rw_quant[,1],
                       x_hi = rw_quant[,3],
                       year = years[yrinds],
                       model = 'RW')
}


inds_C = which(X2Tr_C == tree)
yrinds_C = X2year_C[inds_C]

if (in.RW){
  idx_rw_obs = which(Xobs$stat_id == tree)
  
  rw_obs = data.frame(x_obs = Xobs$incr[idx_rw_obs],
                      year = years[Xobs$year[idx_rw_obs]])
} else {
  rw_obs = data.frame(x_obs = numeric(0),
                      year = numeric(0))
}

# Create a text
grob <- grobTree(textGrob(paste0('Tree ', tree, '; Stem ID ', stem_id, '; Species ', taxon[tree] ), x=0.05,  y=0.9, hjust=0,
                          gp=gpar(col="black", fontsize=22)))

p2 = ggplot() +
  # geom_line(data=dbh_tree, aes(x=year, y=d_mean)) +
  # geom_ribbon(data=rw_tree, aes(x=year, ymin=x_lo, ymax=x_hi), fill='lightgrey') +
  geom_ribbon(data=rw_tree, aes(x=year, ymin=x_lo, ymax=x_hi, fill=model), alpha=0.5) +
  geom_line(data=rw_tree, aes(x=year, y=x_median, colour=model)) +
  geom_point(data=rw_obs, aes(x=year, y=x_obs), size=2, alpha=0.4) +
  # geom_dog(data=rw_obs, aes(x=year, y=x_obs, dog='glasses'), size=2) +
  # ylim(c(0,500)) +
  xlab('year') +
  ylab('rw (mm)') +
  xlim(c(year_lo, year_hi)) +
  theme_bw(16)  #+
# ggtitle(paste0('Tree ', i)) +
# annotation_custom(grob)

# print(p2)

grid.arrange(p1, p2, nrow = 2)



```

## Data vs model plots (DBH RW)

```{R}
# load the Full TR only model outputs
# put some example exploration of the model outputs here
```

## Model Checking in stan:

```{R}
# traceplots
# checking model diagnostics

```

## Model Validation:

```{r}
# comparing estimates of diameter increment to observationa
dbh_validate = readRDS('output/DBH_VALIDATE_HARVARD.RDS')
dbh_validate = subset(dbh_validate, model == 'RW')

rw_validate = readRDS('output/RW_VALIDATE_HARVARD.RDS')
rw_validate = subset(rw_validate, model == 'RW')


tree_validate = readRDS('output/TREE_VALIDATE_HARVARD.RDS')

head(tree_validate)

p <- ggplot(data=dbh_validate) +
  geom_abline(intercept=0, slope=1, lty=2, colour='red') +
  geom_linerange(aes(x=d_obs, ymin=d_model_lo, ymax=d_model_hi, colour=model), alpha=0.3) +
  geom_point(aes(x=d_obs, y=d_model_median, colour=model), size=2, alpha=0.3) +
  geom_line(stat='smooth', method='lm', formula = y ~ x, aes(x=d_obs, y=d_model_median), colour = 'blue', alpha=0.5, fullrange=TRUE) +
  xlab('dbh obs (cm)') +
  ylab('dbh model (cm)') +
  theme_bw(16) +
  coord_fixed() 
print(p)

    q <- ggplot(data=rw_validate) +
      geom_abline(intercept=0, slope=1, lty=2, colour='red') +
      geom_smooth(method='lm', aes(x=rw_obs, y=rw_model_median), fullrange=TRUE) +
      geom_linerange(aes(x=rw_obs, ymin=rw_model_lo, ymax=rw_model_hi, colour=model), alpha=0.3) +
      geom_point(aes(x=rw_obs, y=rw_model_median, colour=model), size=2, alpha=0.3) +
      # geom_dog(data=rw_obs, aes(x=year, y=x_obs, dog='glasses'), size=2) +
      # ylim(c(0,500)) +
      xlab('rw obs (mm)') +
      ylab('rw model (mm)') +
      theme_bw(16) + 
      coord_equal(xlim=c(rw_min, 30), ylim=c(rw_min, 30)) #+
      # xlim(c(rw_min, 30))+#rw_max)) +
      # ylim(c(rw_min, 30))#rw_max))
    print(q)
```

# 2. Growth to Biomass

```{R}
# code to estimate biomass
choj = read.csv('data/acronym_to_chojnacky_v0.1.csv', stringsAsFactors = FALSE)

# use HAVI (average of all hardwoods) for those species not found in chojnacky equations
gen = choj[which(choj$acronym == 'HAVI'),]
choj = choj %>% filter(acronym %in% unique(taxon_C))

# first for RW only model (no census)
dbh_array_RW = array(NA, dim = c(N_Tr, N_years, iter))
agb_array_RW = array(NA, dim = c(N_Tr, N_years, iter))

for (t in 1:N_Tr){
  
  # determine which estimates correspond to this tree
  inds = which(X2Tr == t)
  yrinds = X2year[inds]
  
  # extract diameter data
  dbh_array_RW[t,yrinds,] = t(post_d[,inds])
  
  # get equation coefficients based on taxon
  beta0 = choj$beta0[which(choj$acronym == taxon[t])]
  beta1 = choj$beta1[which(choj$acronym == taxon[t])]
  
  if (length(beta0)==0){
    beta0 = gen$beta0
    beta1 = gen$beta1
  }
  
  # use biomass equation to estimate biomass from diameter
  agb_array_RW[t,,] = exp(beta0 + beta1 * log(dbh_array_RW[t,,]))
}


# melt down dbh_array to data frame
dbh_melt = melt(dbh_array_RW)
colnames(dbh_melt) = c('tree','year','iter','value')
dbh_melt = dbh_melt %>% filter(!is.na(value))
dbh_melt$year = years[dbh_melt$year]
dbh_melt$plot = plot[dbh_melt$tree]
dbh_melt$taxon = taxon[dbh_melt$tree]
dbh_melt$model = rep("RW", nrow(dbh_melt))
dbh_melt$type = rep('dbh',nrow(dbh_melt))
# rm(dbh_array)

# melt down agb_array to data frame
agb_melt = melt(agb_array_RW)
colnames(agb_melt) = c('tree','year','iter','value')
agb_melt = agb_melt %>% filter(!is.na(value))
agb_melt$year = years[agb_melt$year]
agb_melt$plot = plot[agb_melt$tree]
agb_melt$taxon = taxon[agb_melt$tree]
agb_melt$model = rep("RW", nrow(agb_melt))
agb_melt$type = rep('ab',nrow(agb_melt))


#for (tree in 1:N_C){
tree = 1 
print(tree)

agb_tree = agb_melt[which(agb_melt$tree == tree),]
agb_tree_quants = agb_tree %>%
  dplyr::group_by(tree, year, model) %>%
  dplyr::summarize(agb_mean = mean(value, na.rm=TRUE),
                   agb_median = quantile(value, c(0.5)),
                   agb_lo = quantile(value, c(0.025)),
                   agb_hi = quantile(value, c(0.975)), .groups = 'keep')

species_id = agb_tree$taxon[1]
stem_id = Tr$id[which(Tr$stat_id == tree)]

grob <- grobTree(textGrob(paste0('Tree ', tree, '; Stem ID ', stem_id, '; Species ', species_id ), x=0.05,  y=0.9, hjust=0,
                          gp=gpar(col="black", fontsize=22)))

p1 = ggplot() +
  geom_ribbon(data = agb_tree_quants, aes(x = year, ymin = agb_lo, ymax = agb_hi, fill = model), alpha=0.5) +
  geom_line(data=agb_tree_quants, aes(x=year, y=agb_median, colour = model)) +
  xlab('year') +
  ylab('agb (kg)') +
  xlim(c(year_lo, year_hi)) +
  theme_bw(16)  +
  # ggtitle(paste0('Tree ', i)) +
  annotation_custom(grob)




```

## individual tree show AGB vs year

## taxon

## site

# XXX

## filter out values less than 5 cm DBH

```{R}
# first for RW only model
for (tree in 1:N_Tr){
  for (year in 1:N_years){
    
    # determine mean DBH for this year and tree
    dbh_mean = mean(dbh_array_RW[tree, year, ], na.rm=TRUE)
    
    # if smaller than 5 cm., eliminate the data
    if (is.na(dbh_mean) | dbh_mean >= 5) next
    dbh_array_RW[tree, year, ] = rep(NA, iter)
    agb_array_RW[tree, year, ] = rep(NA, iter)
  }
}
```

## sampling correction

# 3. Biomass to Biomass Increment

# determine biomass increment

```{R}
# first for RW only model
abi = apply(agb_array_RW, c(1,3), function(x) diff(x))
abi = aperm(abi, c(2, 1, 3))
abi_melt = melt(abi)
colnames(abi_melt) = c('tree', 'year', 'iter', 'value')
abi_melt = abi_melt %>% filter(!is.na(value))
abi_melt$year = years[abi_melt$year]
abi_melt$plot = plot[abi_melt$tree]
abi_melt$taxon = taxon[abi_melt$tree]
abi_melt$model = rep("RW", nrow(abi_melt))
abi_melt$type = rep('abi',nrow(abi_melt))



abi_tree = abi_melt[which(abi_melt$tree == tree),]
abi_tree_quants = abi_tree %>%
  dplyr::group_by(tree, year, model) %>%
  dplyr::summarize(abi_mean = mean(value, na.rm=TRUE),
                   abi_median = quantile(value, c(0.5)),
                   abi_lo = quantile(value, c(0.025)),
                   abi_hi = quantile(value, c(0.975)), .groups = 'keep')

p2 = ggplot() +
  geom_ribbon(data = abi_tree_quants, aes(x = year, ymin = abi_lo, ymax = abi_hi, fill = model), alpha=0.5) +
  geom_line(data=abi_tree_quants, aes(x=year, y=abi_median, colour = model)) +
  xlab('year') +
  ylab('abi (kg / year)') +
  xlim(c(year_lo, year_hi)) +
  theme_bw(16)  #+
# ggtitle(paste0('Tree ', i)) +
# annotation_custom(grob)
# print(p1)

grid.arrange(p1, p2, nrow = 2)
```

## individual tree show AGB vs year

## taxon

## site

```{R}
# code to estimate biomass
```

## Plot of AGB and AGBI with uncertainty

```{R}
# plot total and by taxa
```

# 4. Compare with data only
